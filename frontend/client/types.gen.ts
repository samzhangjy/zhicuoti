// This file is auto-generated by @hey-api/openapi-ts

/**
 * Model for analyze per subject tag count entity.
 */
export type AnalyzePerSubjectTagCntEntity = {
    cnt: number;
    tag_id: string;
    date: {
        [key: string]: number;
    };
};

export type BodyAuthLogin = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type BodyProblemOcrImageRoute = {
    image: Blob | File;
};

/**
 * Model for creating a class.
 */
export type ClassCreate = {
    name: string;
    description: string | null;
};

/**
 * Model for a public class.
 */
export type ClassPublic = {
    id: string;
    name: string;
    description: string | null;
};

/**
 * Model for a public class with relations.
 */
export type ClassPublicWithRelations = {
    id: string;
    name: string;
    description: string | null;
    teachers: Array<UserPublicInfo>;
    students: Array<UserPublicInfo>;
};

/**
 * Model for get analyze latest subject problems response.
 */
export type GetAnalyzeLatestSubjectProblemsResponse = {
    subject: SubjectPublic;
    problems: Array<ProblemPublic>;
};

/**
 * Model for get analyze overview response.
 */
export type GetAnalyzeOverviewResponse = {
    problems_cnt: number;
    subjects_cnt: {
        [key: string]: number;
    };
    date_cnt: {
        [key: string]: number;
    };
};

/**
 * Model for get analyze per subject response.
 */
export type GetAnalyzePerSubjectResponse = {
    subject: SubjectPublic;
    problems_cnt: number;
    date_cnt: {
        [key: string]: number;
    };
    tags_cnt: {
        [key: string]: AnalyzePerSubjectTagCntEntity;
    };
};

/**
 * Model for get analyze tag problems response.
 */
export type GetAnalyzeTagProblemsResponse = {
    tag: TagPublic;
    problems: Array<ProblemPublic>;
    total_pages: number;
};

/**
 * Model for get my problems response.
 */
export type GetProblemsResponse = {
    problems: Array<ProblemPublic>;
    total_pages: number;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Model for a public OCR box.
 */
export type OcrBoxPublic = {
    id: string;
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    detected_text: string;
};

/**
 * Model for a public OCR result.
 */
export type OcrResultPublic = {
    id: string;
    content: string | null;
    problem_id: string | null;
    boxes: Array<OcrBoxPublic>;
    chosen_box: OcrBoxPublic | null;
};

/**
 * Model for creating a problem.
 */
export type ProblemCreate = {
    original_answer: string | null;
    original_answer_type: ProblemDescriptionType | null;
    correct_answer: string | null;
    correct_answer_type: ProblemDescriptionType | null;
    ocr_result_id: string;
    ocr_box_id: string;
};

/**
 * Enum for problem content types.
 */
export type ProblemDescriptionType = 'text' | 'image';

/**
 * Model for editing a problem.
 */
export type ProblemEdit = {
    original_answer: string | null;
    original_answer_type: ProblemDescriptionType | null;
    correct_answer: string | null;
    correct_answer_type: ProblemDescriptionType | null;
    tags: Array<string>;
};

/**
 * Model for a public problem.
 */
export type ProblemPublic = {
    id: string;
    created_at: string;
    content: string;
    original_answer: string | null;
    original_answer_type: ProblemDescriptionType | null;
    correct_answer: string | null;
    correct_answer_type: ProblemDescriptionType | null;
    subject: SubjectPublic;
    tags: Array<TagPublic>;
    owner: UserPublic;
    ocr_result: OcrResultPublic;
};

/**
 * Model for updating a student.
 */
export type StudentUpdate = {
    phone_number: string;
};

/**
 * Database model for a subject.
 */
export type Subject = {
    id?: string;
    name: string;
};

/**
 * Model for a public subject.
 */
export type SubjectPublic = {
    id: string;
    name: string;
};

/**
 * Model for a public subject with relations.
 */
export type SubjectPublicWithRelations = {
    id: string;
    name: string;
    tags: Array<Tag>;
    teachers: Array<TeacherPublic>;
};

/**
 * Database model for a tag.
 */
export type Tag = {
    id?: string;
    name: string;
    subject_id: string;
};

/**
 * Model for a public tag.
 */
export type TagPublic = {
    id: string;
    name: string;
    subject: SubjectPublic;
};

/**
 * Model for a public tag with relations.
 */
export type TagPublicWithRelations = {
    id: string;
    name: string;
    subject: SubjectPublic;
    problems: Array<ProblemPublic>;
};

/**
 * Model for a public teacher.
 */
export type TeacherPublic = {
    name: string;
    role: UserRole;
    id: string;
    subject_id: string;
};

/**
 * Model for updating a teacher.
 */
export type TeacherUpdate = {
    phone_number: string;
    subject_id: string | null;
};

/**
 * JSON payload containing access token.
 */
export type Token = {
    access_token: string;
    token_type?: string;
};

/**
 * Model for creating a user.
 */
export type UserCreate = {
    name: string;
    role: UserRole;
    password: string;
    phone_number: string;
};

/**
 * Model for a user.
 */
export type UserMe = {
    name: string;
    role: UserRole;
    id: string;
    phone_number: string;
    owned_classes: Array<ClassPublic>;
    class_: ClassPublic | null;
    subject: Subject | null;
};

/**
 * Model for a public user.
 */
export type UserPublic = {
    name: string;
    role: UserRole;
    id: string;
};

/**
 * Model for a public user info.
 */
export type UserPublicInfo = {
    name: string;
    role: UserRole;
    id: string;
    phone_number: string;
    subject: Subject | null;
};

/**
 * Enum for user roles.
 */
export type UserRole = 'student' | 'teacher';

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type AuthRegisterData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type AuthRegisterErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthRegisterError = AuthRegisterErrors[keyof AuthRegisterErrors];

export type AuthRegisterResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type AuthRegisterResponse = AuthRegisterResponses[keyof AuthRegisterResponses];

export type AuthLoginData = {
    body: BodyAuthLogin;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type AuthLoginErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthLoginError = AuthLoginErrors[keyof AuthLoginErrors];

export type AuthLoginResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/me';
};

export type AuthGetMeResponses = {
    /**
     * Successful Response
     */
    200: UserMe;
};

export type AuthGetMeResponse = AuthGetMeResponses[keyof AuthGetMeResponses];

export type ClassCreateClassRouteData = {
    body: ClassCreate;
    path?: never;
    query?: never;
    url: '/api/v1/class/';
};

export type ClassCreateClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassCreateClassRouteError = ClassCreateClassRouteErrors[keyof ClassCreateClassRouteErrors];

export type ClassCreateClassRouteResponses = {
    /**
     * Successful Response
     */
    200: ClassPublic;
};

export type ClassCreateClassRouteResponse = ClassCreateClassRouteResponses[keyof ClassCreateClassRouteResponses];

export type ClassInviteClassRouteData = {
    body?: never;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/class/{class_id}/invitation-code';
};

export type ClassInviteClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassInviteClassRouteError = ClassInviteClassRouteErrors[keyof ClassInviteClassRouteErrors];

export type ClassInviteClassRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClassDeleteClassRouteData = {
    body?: never;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/class/{class_id}';
};

export type ClassDeleteClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassDeleteClassRouteError = ClassDeleteClassRouteErrors[keyof ClassDeleteClassRouteErrors];

export type ClassDeleteClassRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClassGetClassRouteData = {
    body?: never;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/class/{class_id}';
};

export type ClassGetClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassGetClassRouteError = ClassGetClassRouteErrors[keyof ClassGetClassRouteErrors];

export type ClassGetClassRouteResponses = {
    /**
     * Successful Response
     */
    200: ClassPublicWithRelations;
};

export type ClassGetClassRouteResponse = ClassGetClassRouteResponses[keyof ClassGetClassRouteResponses];

export type ClassEditClassRouteData = {
    body: ClassCreate;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/class/{class_id}';
};

export type ClassEditClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassEditClassRouteError = ClassEditClassRouteErrors[keyof ClassEditClassRouteErrors];

export type ClassEditClassRouteResponses = {
    /**
     * Successful Response
     */
    200: ClassPublic;
};

export type ClassEditClassRouteResponse = ClassEditClassRouteResponses[keyof ClassEditClassRouteResponses];

export type ClassJoinClassRouteData = {
    body?: never;
    path?: never;
    query: {
        invitation_code: string;
    };
    url: '/api/v1/class/join';
};

export type ClassJoinClassRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ClassJoinClassRouteError = ClassJoinClassRouteErrors[keyof ClassJoinClassRouteErrors];

export type ClassJoinClassRouteResponses = {
    /**
     * Successful Response
     */
    200: ClassPublic;
};

export type ClassJoinClassRouteResponse = ClassJoinClassRouteResponses[keyof ClassJoinClassRouteResponses];

export type SubjectGetSubjectsRouteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/subject/';
};

export type SubjectGetSubjectsRouteResponses = {
    /**
     * Successful Response
     */
    200: Array<SubjectPublic>;
};

export type SubjectGetSubjectsRouteResponse = SubjectGetSubjectsRouteResponses[keyof SubjectGetSubjectsRouteResponses];

export type SubjectGetSubjectData = {
    body?: never;
    path: {
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/subject/{subject_id}';
};

export type SubjectGetSubjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubjectGetSubjectError = SubjectGetSubjectErrors[keyof SubjectGetSubjectErrors];

export type SubjectGetSubjectResponses = {
    /**
     * Successful Response
     */
    200: SubjectPublicWithRelations;
};

export type SubjectGetSubjectResponse = SubjectGetSubjectResponses[keyof SubjectGetSubjectResponses];

export type UserEditTeacherRouteData = {
    body: TeacherUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/user/teacher';
};

export type UserEditTeacherRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UserEditTeacherRouteError = UserEditTeacherRouteErrors[keyof UserEditTeacherRouteErrors];

export type UserEditTeacherRouteResponses = {
    /**
     * Successful Response
     */
    200: UserMe;
};

export type UserEditTeacherRouteResponse = UserEditTeacherRouteResponses[keyof UserEditTeacherRouteResponses];

export type UserEditStudentRouteData = {
    body: StudentUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/user/student';
};

export type UserEditStudentRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UserEditStudentRouteError = UserEditStudentRouteErrors[keyof UserEditStudentRouteErrors];

export type UserEditStudentRouteResponses = {
    /**
     * Successful Response
     */
    200: UserMe;
};

export type UserEditStudentRouteResponse = UserEditStudentRouteResponses[keyof UserEditStudentRouteResponses];

export type ProblemOcrImageRouteData = {
    body: BodyProblemOcrImageRoute;
    path?: never;
    query?: never;
    url: '/api/v1/problem/ocr';
};

export type ProblemOcrImageRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemOcrImageRouteError = ProblemOcrImageRouteErrors[keyof ProblemOcrImageRouteErrors];

export type ProblemOcrImageRouteResponses = {
    /**
     * Successful Response
     */
    200: OcrResultPublic;
};

export type ProblemOcrImageRouteResponse = ProblemOcrImageRouteResponses[keyof ProblemOcrImageRouteResponses];

export type ProblemCreateProblemRouteData = {
    body: ProblemCreate;
    path?: never;
    query?: never;
    url: '/api/v1/problem/';
};

export type ProblemCreateProblemRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemCreateProblemRouteError = ProblemCreateProblemRouteErrors[keyof ProblemCreateProblemRouteErrors];

export type ProblemCreateProblemRouteResponses = {
    /**
     * Successful Response
     */
    200: ProblemPublic;
};

export type ProblemCreateProblemRouteResponse = ProblemCreateProblemRouteResponses[keyof ProblemCreateProblemRouteResponses];

export type ProblemDeleteProblemRouteData = {
    body?: never;
    path: {
        problem_id: string;
    };
    query?: never;
    url: '/api/v1/problem/{problem_id}';
};

export type ProblemDeleteProblemRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemDeleteProblemRouteError = ProblemDeleteProblemRouteErrors[keyof ProblemDeleteProblemRouteErrors];

export type ProblemDeleteProblemRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ProblemGetProblemRouteData = {
    body?: never;
    path: {
        problem_id: string;
    };
    query?: never;
    url: '/api/v1/problem/{problem_id}';
};

export type ProblemGetProblemRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemGetProblemRouteError = ProblemGetProblemRouteErrors[keyof ProblemGetProblemRouteErrors];

export type ProblemGetProblemRouteResponses = {
    /**
     * Successful Response
     */
    200: ProblemPublic;
};

export type ProblemGetProblemRouteResponse = ProblemGetProblemRouteResponses[keyof ProblemGetProblemRouteResponses];

export type ProblemEditProblemRouteData = {
    body: ProblemEdit;
    path: {
        problem_id: string;
    };
    query?: never;
    url: '/api/v1/problem/{problem_id}';
};

export type ProblemEditProblemRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemEditProblemRouteError = ProblemEditProblemRouteErrors[keyof ProblemEditProblemRouteErrors];

export type ProblemEditProblemRouteResponses = {
    /**
     * Successful Response
     */
    200: ProblemPublic;
};

export type ProblemEditProblemRouteResponse = ProblemEditProblemRouteResponses[keyof ProblemEditProblemRouteResponses];

export type ProblemGetMyProblemsRouteData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
    };
    url: '/api/v1/problem/my';
};

export type ProblemGetMyProblemsRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemGetMyProblemsRouteError = ProblemGetMyProblemsRouteErrors[keyof ProblemGetMyProblemsRouteErrors];

export type ProblemGetMyProblemsRouteResponses = {
    /**
     * Successful Response
     */
    200: GetProblemsResponse;
};

export type ProblemGetMyProblemsRouteResponse = ProblemGetMyProblemsRouteResponses[keyof ProblemGetMyProblemsRouteResponses];

export type ProblemGetProblemSolutionRouteData = {
    body?: never;
    path: {
        problem_id: string;
    };
    query?: never;
    url: '/api/v1/problem/{problem_id}/solution';
};

export type ProblemGetProblemSolutionRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProblemGetProblemSolutionRouteError = ProblemGetProblemSolutionRouteErrors[keyof ProblemGetProblemSolutionRouteErrors];

export type ProblemGetProblemSolutionRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StaticServeStaticData = {
    body?: never;
    path: {
        filepath: string;
    };
    query?: never;
    url: '/api/v1/static/{filepath}';
};

export type StaticServeStaticErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StaticServeStaticError = StaticServeStaticErrors[keyof StaticServeStaticErrors];

export type StaticServeStaticResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TagGetTagsRouteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tag/';
};

export type TagGetTagsRouteResponses = {
    /**
     * Successful Response
     */
    200: Array<TagPublic>;
};

export type TagGetTagsRouteResponse = TagGetTagsRouteResponses[keyof TagGetTagsRouteResponses];

export type TagGetTagsForUserRouteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tag/my';
};

export type TagGetTagsForUserRouteResponses = {
    /**
     * Successful Response
     */
    200: Array<TagPublic>;
};

export type TagGetTagsForUserRouteResponse = TagGetTagsForUserRouteResponses[keyof TagGetTagsForUserRouteResponses];

export type TagSearchTagsRouteData = {
    body?: never;
    path?: never;
    query: {
        query: string;
        subject_id: string;
    };
    url: '/api/v1/tag/search';
};

export type TagSearchTagsRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TagSearchTagsRouteError = TagSearchTagsRouteErrors[keyof TagSearchTagsRouteErrors];

export type TagSearchTagsRouteResponses = {
    /**
     * Successful Response
     */
    200: Array<TagPublic>;
};

export type TagSearchTagsRouteResponse = TagSearchTagsRouteResponses[keyof TagSearchTagsRouteResponses];

export type TagGetTagRouteData = {
    body?: never;
    path: {
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/tag/{tag_id}';
};

export type TagGetTagRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TagGetTagRouteError = TagGetTagRouteErrors[keyof TagGetTagRouteErrors];

export type TagGetTagRouteResponses = {
    /**
     * Successful Response
     */
    200: TagPublicWithRelations;
};

export type TagGetTagRouteResponse = TagGetTagRouteResponses[keyof TagGetTagRouteResponses];

export type TagGetTagForUserRouteData = {
    body?: never;
    path: {
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/tag/{tag_id}/my';
};

export type TagGetTagForUserRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TagGetTagForUserRouteError = TagGetTagForUserRouteErrors[keyof TagGetTagForUserRouteErrors];

export type TagGetTagForUserRouteResponses = {
    /**
     * Successful Response
     */
    200: TagPublicWithRelations;
};

export type TagGetTagForUserRouteResponse = TagGetTagForUserRouteResponses[keyof TagGetTagForUserRouteResponses];

export type AnalyzeGetMyOverviewRouteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/analyze/me';
};

export type AnalyzeGetMyOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzeOverviewResponse;
};

export type AnalyzeGetMyOverviewRouteResponse = AnalyzeGetMyOverviewRouteResponses[keyof AnalyzeGetMyOverviewRouteResponses];

export type AnalyzeGetMyPerSubjectOverviewRouteData = {
    body?: never;
    path: {
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/me/subject/{subject_id}';
};

export type AnalyzeGetMyPerSubjectOverviewRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetMyPerSubjectOverviewRouteError = AnalyzeGetMyPerSubjectOverviewRouteErrors[keyof AnalyzeGetMyPerSubjectOverviewRouteErrors];

export type AnalyzeGetMyPerSubjectOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzePerSubjectResponse;
};

export type AnalyzeGetMyPerSubjectOverviewRouteResponse = AnalyzeGetMyPerSubjectOverviewRouteResponses[keyof AnalyzeGetMyPerSubjectOverviewRouteResponses];

export type AnalyzeGetMyTagAiAnalysisRouteData = {
    body?: never;
    path: {
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/me/tag/{tag_id}/ai';
};

export type AnalyzeGetMyTagAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetMyTagAiAnalysisRouteError = AnalyzeGetMyTagAiAnalysisRouteErrors[keyof AnalyzeGetMyTagAiAnalysisRouteErrors];

export type AnalyzeGetMyTagAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetMySubjectAiAnalysisRouteData = {
    body?: never;
    path: {
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/me/subject/{subject_id}/ai';
};

export type AnalyzeGetMySubjectAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetMySubjectAiAnalysisRouteError = AnalyzeGetMySubjectAiAnalysisRouteErrors[keyof AnalyzeGetMySubjectAiAnalysisRouteErrors];

export type AnalyzeGetMySubjectAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetStudentOverviewRouteData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/student/{user_id}';
};

export type AnalyzeGetStudentOverviewRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetStudentOverviewRouteError = AnalyzeGetStudentOverviewRouteErrors[keyof AnalyzeGetStudentOverviewRouteErrors];

export type AnalyzeGetStudentOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzeOverviewResponse;
};

export type AnalyzeGetStudentOverviewRouteResponse = AnalyzeGetStudentOverviewRouteResponses[keyof AnalyzeGetStudentOverviewRouteResponses];

export type AnalyzeGetStudentPerSubjectOverviewRouteData = {
    body?: never;
    path: {
        subject_id: string;
        user_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/student/{user_id}/subject/{subject_id}';
};

export type AnalyzeGetStudentPerSubjectOverviewRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetStudentPerSubjectOverviewRouteError = AnalyzeGetStudentPerSubjectOverviewRouteErrors[keyof AnalyzeGetStudentPerSubjectOverviewRouteErrors];

export type AnalyzeGetStudentPerSubjectOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzePerSubjectResponse;
};

export type AnalyzeGetStudentPerSubjectOverviewRouteResponse = AnalyzeGetStudentPerSubjectOverviewRouteResponses[keyof AnalyzeGetStudentPerSubjectOverviewRouteResponses];

export type AnalyzeGetStudentTagAiAnalysisRouteData = {
    body?: never;
    path: {
        user_id: string;
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/student/{user_id}/tag/{tag_id}/ai';
};

export type AnalyzeGetStudentTagAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetStudentTagAiAnalysisRouteError = AnalyzeGetStudentTagAiAnalysisRouteErrors[keyof AnalyzeGetStudentTagAiAnalysisRouteErrors];

export type AnalyzeGetStudentTagAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetStudentSubjectAiAnalysisRouteData = {
    body?: never;
    path: {
        user_id: string;
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/student/{user_id}/subject/{subject_id}/ai';
};

export type AnalyzeGetStudentSubjectAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetStudentSubjectAiAnalysisRouteError = AnalyzeGetStudentSubjectAiAnalysisRouteErrors[keyof AnalyzeGetStudentSubjectAiAnalysisRouteErrors];

export type AnalyzeGetStudentSubjectAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetClassOverviewRouteData = {
    body?: never;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}';
};

export type AnalyzeGetClassOverviewRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetClassOverviewRouteError = AnalyzeGetClassOverviewRouteErrors[keyof AnalyzeGetClassOverviewRouteErrors];

export type AnalyzeGetClassOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzeOverviewResponse;
};

export type AnalyzeGetClassOverviewRouteResponse = AnalyzeGetClassOverviewRouteResponses[keyof AnalyzeGetClassOverviewRouteResponses];

export type AnalyzeGetPerSubjectOverviewRouteData = {
    body?: never;
    path: {
        subject_id: string;
        class_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}/subject/{subject_id}';
};

export type AnalyzeGetPerSubjectOverviewRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetPerSubjectOverviewRouteError = AnalyzeGetPerSubjectOverviewRouteErrors[keyof AnalyzeGetPerSubjectOverviewRouteErrors];

export type AnalyzeGetPerSubjectOverviewRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzePerSubjectResponse;
};

export type AnalyzeGetPerSubjectOverviewRouteResponse = AnalyzeGetPerSubjectOverviewRouteResponses[keyof AnalyzeGetPerSubjectOverviewRouteResponses];

export type AnalyzeGetTeacherSubjectAiAnalysisRouteData = {
    body?: never;
    path: {
        class_id: string;
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}/subject/{subject_id}/ai';
};

export type AnalyzeGetTeacherSubjectAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetTeacherSubjectAiAnalysisRouteError = AnalyzeGetTeacherSubjectAiAnalysisRouteErrors[keyof AnalyzeGetTeacherSubjectAiAnalysisRouteErrors];

export type AnalyzeGetTeacherSubjectAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetTeacherTagAiAnalysisRouteData = {
    body?: never;
    path: {
        class_id: string;
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}/tag/{tag_id}/ai';
};

export type AnalyzeGetTeacherTagAiAnalysisRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetTeacherTagAiAnalysisRouteError = AnalyzeGetTeacherTagAiAnalysisRouteErrors[keyof AnalyzeGetTeacherTagAiAnalysisRouteErrors];

export type AnalyzeGetTeacherTagAiAnalysisRouteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnalyzeGetLatestProblemsRouteData = {
    body?: never;
    path: {
        class_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}/latest';
};

export type AnalyzeGetLatestProblemsRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetLatestProblemsRouteError = AnalyzeGetLatestProblemsRouteErrors[keyof AnalyzeGetLatestProblemsRouteErrors];

export type AnalyzeGetLatestProblemsRouteResponses = {
    /**
     * Successful Response
     */
    200: Array<ProblemPublic>;
};

export type AnalyzeGetLatestProblemsRouteResponse = AnalyzeGetLatestProblemsRouteResponses[keyof AnalyzeGetLatestProblemsRouteResponses];

export type AnalyzeGetLatestSubjectProblemsRouteData = {
    body?: never;
    path: {
        class_id: string;
        subject_id: string;
    };
    query?: never;
    url: '/api/v1/analyze/{class_id}/subject/{subject_id}/latest';
};

export type AnalyzeGetLatestSubjectProblemsRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetLatestSubjectProblemsRouteError = AnalyzeGetLatestSubjectProblemsRouteErrors[keyof AnalyzeGetLatestSubjectProblemsRouteErrors];

export type AnalyzeGetLatestSubjectProblemsRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzeLatestSubjectProblemsResponse;
};

export type AnalyzeGetLatestSubjectProblemsRouteResponse = AnalyzeGetLatestSubjectProblemsRouteResponses[keyof AnalyzeGetLatestSubjectProblemsRouteResponses];

export type AnalyzeGetTagProblemsRouteData = {
    body?: never;
    path: {
        tag_id: string;
        class_id: string;
    };
    query?: {
        page?: number;
    };
    url: '/api/v1/analyze/{class_id}/tag/{tag_id}';
};

export type AnalyzeGetTagProblemsRouteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnalyzeGetTagProblemsRouteError = AnalyzeGetTagProblemsRouteErrors[keyof AnalyzeGetTagProblemsRouteErrors];

export type AnalyzeGetTagProblemsRouteResponses = {
    /**
     * Successful Response
     */
    200: GetAnalyzeTagProblemsResponse;
};

export type AnalyzeGetTagProblemsRouteResponse = AnalyzeGetTagProblemsRouteResponses[keyof AnalyzeGetTagProblemsRouteResponses];

export type UtilitiesListEndpointsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/endpoints/';
};

export type UtilitiesListEndpointsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};